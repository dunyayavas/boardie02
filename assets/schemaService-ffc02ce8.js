import{s as n}from"./index-4e9d545e.js";async function a(e){try{const{data:{user:r}}=await n.auth.getUser();if(!r)throw new Error("No user logged in");const{data:o,error:t}=await n.from("information_schema.columns").select("column_name, data_type, is_nullable").eq("table_name",e);if(t)throw console.error(`Error fetching schema for table ${e}:`,t),t;return o||[]}catch(r){return console.error("Error in getTableColumns:",r),[]}}async function c(e){try{const r=await a(e);return console.log(`Schema for table '${e}':`),console.table(r),r}catch(r){return console.error("Error logging table schema:",r),[]}}async function l(e,r){try{return(await a(e)).some(t=>t.column_name===r)}catch(o){return console.error(`Error checking if column ${r} exists in table ${e}:`,o),!1}}async function i(){try{const{data:{user:e}}=await n.auth.getUser();if(!e)throw new Error("No user logged in");const{data:r,error:o}=await n.from("information_schema.tables").select("table_name").eq("table_schema","public");if(o)throw console.error("Error fetching tables:",o),o;return(r||[]).map(t=>t.table_name)}catch(e){return console.error("Error in listTables:",e),[]}}export{l as columnExists,a as getTableColumns,i as listTables,c as logTableSchema};
